a
about
abstract
accepts
adjusted
after
algorithm
all
altered
always
an
and
answer
answers
any
appropriate
are
argument
arguments
array
arrays
arrow
arrowht
arrowwid
as
assembling
assignments
assume
at
b
bash
be
binary
binfn
blank
block
blockclosure
books
both
bottom
box
boxes
by
c
caar
cadr
calculator
call
called
car
cdar
cddr
cdr
cell
cells
characters
checking
choice
circle
class
closure
column
combines
common
computer
computes
cons
containing
contains
correct
cse
curried
d
declarations
deducted
define
delim
different
divisor
do
does
don
downward
draw
drawn
dynamic
e
each
either
element
elements
else
elsewhere
email
en
enter
environment
eq
equivalent
error
euclid
eval
evalexpr
evaluated
exam
examboxes
executing
explicitly
expr
expression
expressions
extend
f
field
fields
fill
final
find
finish
first
float
fold
folded
foldl
following
for
formula
found
free
from
fun
function
functional
gcd
given
gotos
greatest
greek
has
hash
head
here
higher
hint
home
horizontally
how
i
id
identity
if
iffalse
iftrue
imperative
in
index
indicates
inference
inner
innerprod
input
inserting
int
integers
interaction
internet
interpreting
into
is
it
its
itself
keyword
kind
label
labels
lang
language
languages
lazy
left
length
let
letter
line
link
list
little
location
loop
make
malloc
manipulate
map
match
max
may
mean
meaning
means
message
messages
messy
method
midterm
might
missing
mm
modifying
more
much
multiple
must
mutually
n
need
negative
new
nil
no
node
non
normal
not
note
notes
null
num
number
numbers
o
object
ocaml
occupied
occurrence
of
on
one
only
operand
operation
operators
or
order
other
output
p
parsing
part
parts
path
pe
phi
phone
picture
poasibly
pointer
pointing
points
position
possible
procedure
prod
product
profile
programming
programs
proper
provided
ps
pt
q
question
questions
rad
reading
real
recursion
recursive
refers
result
results
return
returned
returns
reverse
right
risk
s
same
scheme
scratch
see
self
sent
sequence
should
shown
single
size
sizes
small
smalltalk
so
sometimes
space
spaces
specify
st
stack
standard
starter
statements
strong
struct
sub
sum
sup
symbol
syntactic
syntax
system
t
table
tables
tail
takes
that
the
them
then
there
think
this
thrown
tl
to
tokens
top
total
two
type
types
unit
unreadable
use
used
user
uses
using
v
value
variable
verifying
want
what
where
which
while
will
winter
with
work
worth
write
wrong
x
y
you
your
z
