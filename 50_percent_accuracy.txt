Matching questions with at least 0.5 in common.

Question 1 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.6666666666666666: 
   Ocaml.

    (a) Define sum without using any higher-order functions.  [2pt]

        sum : int list -> int = <fun>
        # sum [1;2;3;4;5];;
        - : int = 15

    (b) Define fold_left.  [2pt]

        val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a =
        <fun>

    (c) Define sumf which uses a \beta-reduced form of calling fold_
        left.  [1pt]

        let sumf = fold_left
        ________________________________________;;
        val sumf : int list -> int = <fun>



Question 4 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.6458333333333334: 
   Ocaml.  Given the definition of fac, fill in the type signatures of
   each of the entries in the table.  [2pt]

                                        +------+------------------------------+
   let fac n =                          | fac  |                              |
       let rec fac' n' a' =             +------+------------------------------+
           if n' <= 1                   | n    |                              |
           then a'                      +------+------------------------------+
           else fac' (n' - 1) (n' * a') | fac' |                              |
       in fac' n 1                      +------+------------------------------+
   ;;                                   | n'   |                              |
                                        +------+------------------------------+
                                        | a'   |                              |
                                        +------+------------------------------+
                                        | <=   |                              |
                                        +------+------------------------------+
                                        | 1    |                              |
                                        +------+------------------------------+
                                        | -    |                              |
                                        +------+------------------------------+
                                        | *    |                              |
                                        +------+------------------------------+



Question 5 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.5384615384615384: 
   Scheme.  Using the same definitions as for Ocaml on the previous
   page:

    (a) Define sum without using any higher-order functions.  [2pt]

    (b) Define fold_left.  [2pt]

    (c) Define sumf which uses fold_left.  [1pt]



Question 6 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.6: 
   Ocaml.

    (a) Without using a higher-order function, define evenlen which
        returns true of the length of the list is even and false oth-
        erwise [2pt]

        val evenlen : 'a list -> bool = <fun>

    (b) Define evenlen which uses fold_left with the same result.  Use
        a \beta-reduced version.  [1pt]

        let evenlen = List.fold_left
        ________________________________________;;
        val evenlen : '_a list -> bool = <fun>



Question 7 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.6086956521739131: 
   Name the two general types of polymorphism, and for each of them,
   name the specific kinds that represents each of them.  [2pt]

   +-------------------------------+-------------------------------+
   |           general             |           specific            |
   +-------------------------------+-------------------------------+
   |                               |                               |
   |                               +-------------------------------+
   |                               |                               |
   +-------------------------------+-------------------------------+
   |                               +-------------------------------+
   |                               |                               |
   +-------------------------------+-------------------------------+



Question 8 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.75: 
   Ocaml.  Write a function to reverse a list.  [2pt]



Question 9 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.7333333333333333: 
   Java.  Write a function to reverse a list.  Do not allocate or free
   any nodes.  Do not use auxiliary functions.  [2pt]
                |
   class node { | node reverse (node head) {
     int value; |
     node link; |
   }            |
                |
                |
                |
                |
                |
                | }



Question 10 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.5225225225225225: 
    Ocaml.  The Collatz conjectures states that for any positive inte-
   ger $n$, if it is repeatedly replaced by $ n / 2 $ when even and $
   3 n + 1 $ when odd, it eventually converges on the integer $1$.
   Write a function that uses a tail-recursive inner function to re-
   turn a list of all integers starting from the argument and ending
   with 1.  The inner function produces the list in the reverse order,
   then the outer function reverses the list.  Use List.rev from the
   library to reverse the list.  [4pt]
   # collatz 4;;
   - : int list = [4; 2; 1]
   # collatz 10;;
   - : int list = [10; 5; 16; 8; 4; 2; 1]
   # collatz 20;;
   - : int list = [20; 10; 5; 16; 8; 4; 2; 1]
   # collatz 16;;
   - : int list = [16; 8; 4; 2; 1]




Question 2 on Multiple Choice part 1 on cmps112-2017q4-midterm.tt with accuracy 0.6470588235294118: 
    The type system in Scheme is:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static



Question 3 on Multiple Choice part 1 on cmps112-2017q4-midterm.tt with accuracy 0.6470588235294118: 
    The type system in Ocaml is:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static



Question 6 on Multiple Choice part 1 on cmps112-2017q4-midterm.tt with accuracy 0.5909090909090909: 
    How much stack space is used by fib?
    (A) $ O ( n ) $
    (B) $ O ( log sub 2 n ) $
    (C) $ O ( n sup 2 ) $
    (D) $ O ( 2 sup n ) $



Question 10 on Multiple Choice part 1 on cmps112-2017q4-midterm.tt with accuracy 0.9285714285714286: 
    Type of (+)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 12 on Multiple Choice part 1 on cmps112-2017q4-midterm.tt with accuracy 0.8636363636363636: 
    In the expression $ ( \lambda x . ( + x ) y ) $
    (A) $x$ is bound and $y$ is bound.
    (B) $x$ is bound and $y$ is free.
    (C) $x$ is free and $y$ is bound.
    (D) $x$ is free and $y$ is free.

+---------------------------------+
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|jpgs/math-but-yesterday-you-said.ps
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
+---------------------------------+




Question 2 on Free Response on cmps112-2018q1-midterm.tt with accuracy 0.7692307692307693: 
   Ocaml.  What is the output from each of the following?  [2pt]

   +-----------------------------+----------------------------------------+
   |reverse;;                    |                                        |
   +-----------------------------+----------------------------------------+
   |(*);;                        |                                        |
   +-----------------------------+----------------------------------------+
   |1::2::3::[];;                |                                        |
   +-----------------------------+----------------------------------------+
   |let car = function x::_ -> x |                                        |
   |     | _ -> failwith "car";; |                                        |
   +-----------------------------+----------------------------------------+



Question 3 on Free Response on cmps112-2018q1-midterm.tt with accuracy 0.6829268292682927: 
   Without using any higher-order functions, code the function fold_
   left, which will take a function, a unit, and a list, and fold the
   list.

   (a) Scheme.  [2pt]
      > (fold_left + 0 '(1 2 3))
      6

   (b) Ocaml.  [2pt]
      # fold_left;;
      - : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
      # fold_left (+) 0 [1;2;3];;
      - : int = 6



Question 4 on Free Response on cmps112-2018q1-midterm.tt with accuracy 0.5517241379310345: 
   Without using any higher-order functions, code the function find,
   which will return a value associated with a given key.  Indicate
   not found as shown here.  Use the sample interactions to figure out
   the structure and arguments to this function.

   (a) Ocaml.  [3pt]
      # find;;
      - : ('a -> 'b -> bool) -> 'a -> ('b * 'c) list -> 'c option =
      <fun>
      # find (=) 3 [(1,2);(3,4);(5,6)];;
      - : int option = Some 4
      # find (=) 3 [(5,6);(7,8)];;
      - : int option = None

   (b) Scheme.  Use cond and not if.  Return #f if not found.  [3pt]
      > (find = 3 '((1 2) (3 4) (5 6)))
      4
      > (find = 3 '((5 6) (7 8)))
      #f



Question 5 on Free Response on cmps112-2018q1-midterm.tt with accuracy 0.5510204081632653: 
   Ocaml.  Define merge which takes a comparison function and two
   sorted lists and merges the two lists into a single sorted list.
   [3pt]
   # merge;;
   - : ('a -> 'a -> bool) -> 'a list -> 'a list -> 'a list = <fun>
   # merge (>) [9;5;1] [4;8;2];;
   - : int list = [9; 5; 4; 8; 2; 1]
   # merge (<) [1;5;9] [2;4;7];;
   - : int list = [1; 2; 4; 5; 7; 9]
   # merge (<) [] [];;
   - : 'a list = []



Question 6 on Free Response on cmps112-2018q1-midterm.tt with accuracy 0.5925925925925926: 
   Ocaml.  Write a function trim which trims leading zeros from a
   list.  [1pt]
   # trim;;
   - : int list -> int list = <fun>
   # trim [1;2;3];;
   - : int list = [1; 2; 3]
   # trim [0;0;5];;
   - : int list = [5]
   # trim [0;0;0];;
   - : int list = []



Question 7 on Free Response on cmps112-2018q1-midterm.tt with accuracy 0.6666666666666666: 
   Ocaml.  Define sub' according to the programming project.  It takes
   two int lists representing multiprecise numbers and subtracts the
   second from the first.  Assume the first number is not less than
   the second number.  [5pt]
   # sub';;
   - : int list -> int list -> int list = <fun>
   # sub' [1;2;3;4] [4;3;2;1];;
   - : int list = [7; 8; 0; 3]
   # sub' [0;0;0;9] [2];;
   - : int list = [8; 9; 9; 8]
   # sub' [3;3;3] [3;3;3];;
   - : int list = []




Question 4 on Multiple Choice part 1 on cmps112-2018q1-midterm.tt with accuracy 0.7142857142857143: 
   Smalltalk's type system is:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static



Question 1 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.5555555555555556: 
    In an eager functional language, which function can not be written
    in a tail-recursive manner without reversing a list?
    (A) fibonacci
    (B) fold_left
    (C) fold_right
    (D) length



Question 3 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.9230769230769231: 
    Output of:
    # (-);;
    (A) - : int * int * int = <fun>
    (B) - : int * int -> int = <fun>
    (C) - : int -> int * int = <fun>
    (D) - : int -> int -> int = <fun>



Question 4 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.5833333333333334: 
    Which language has a strong dynamic type system?
    (A) C and C++
    (B) Java
    (C) Ocaml
    (D) Scheme



Question 6 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.5161290322580645: 
    What is the running time of:
    let rec fib n =
        if n <= 1
            then n
            else fib (n - 1) + fib (n - 2);;
    (A) $ O ( n ) $
    (B) $ O ( n log n ) $
    (C) $ O ( n sup 2 ) $
    (D) $ O ( 2 sup n ) $



Question 7 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.7: 
    What are the first two characters in a Unix script file?
    (A) #!
    (B) %!
    (C) /*
    (D) $<



Question 8 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.6666666666666666: 
    What will print:
    - : float = 5.
    (A) (+ 2. 3.);;
    (B) (+) 2. 3.;;
    (C) 2. + 3.;;
    (D) 2. +. 3.;;



Question 9 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.65: 
    What are the operator precedences is Smalltalk, with the highest
    at the left and lowest at the right?
    (A) binary, keyword, unary
    (B) keyword, binary, unary
    (C) keyword, unary, binary
    (D) unary, binary, keyword



Question 11 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.7777777777777778: 
    What produces x itself as a result of this expression, assuming x
    is a list of at least one element?
    (A) (cons (car x) (cdr x))
    (B) (cons (cdr x) (car x))
    (C) (list (car x) (cdr x))
    (D) (list (cdr x) (car x))



Question 12 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.7142857142857143: 
    Ocaml's type system is:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static




Question 5 on Free Response on cmps112-2018q2-midterm.tt with accuracy 0.6521739130434783: 
   \lambda-calculus.  Given the expression in the \lambda-calculus
   shown at the top of each box, show the derivation order to the num-
   ber 25 for each of normal order and applicative order evaluation.
   [2pt]

   +---------------------------------------------------------+----------------------------------------------------------+
   |normal order evaluation                                  | applicative order evaluation                             |
   +---------------------------------------------------------+----------------------------------------------------------+
   |$ ( lambda x ~ . ~ ~ * ~ x ~ x ) ~ ~ ( + ~ 2 ~ 3 ) ~ ~ $ | $ ( lambda x ~ . ~ ~ * ~ x ~ x ) ~ ~ ( + ~ 2 ~ 3 ) ~ ~ $ |
   |  $=$                                                    |   $=$                                                    |
   |  $=$                                                    |   $=$                                                    |
   |  $=$                                                    |   $=$                                                    |
   |  $=$                                                    |   $=$                                                    |
   |  $=$                                                    |   $=$                                                    |
   |  $=$                                                    |   $=$                                                    |
   |  $=$                                                    |   $=$                                                    |
   |  $=$                                                    |   $=$                                                    |
   |  $= ~ ~ 25$                                             |   $= ~ ~ 25$                                             |
   +---------------------------------------------------------+----------------------------------------------------------+



Question 8 on Free Response on cmps112-2018q2-midterm.tt with accuracy 0.5106382978723404: 
   Ocaml.  Define max consistent with the examples shown here.  [2pt]
   # max;;
   - : ('a -> 'a -> bool) -> 'a list -> 'a option = <fun>
   # max (>);;
   - : '_a list -> '_a option = <fun>
   # max (>) [];;
   - : 'a option = None
   # max (>) [3];;
   - : int option = Some 3
   # max (>) [3;1;4;1;5;9;2;6];;
   - : int option = Some 9
   # max (<) [3;1;4;1;5;9;2;6];;
   - : int option = Some 1
   # max (>) ["foo";"bar";"baz"];;
   - : string option = Some "foo"
   # max (<) [sqrt 2.;exp 1.];;
   - : float option = Some 1.41421356237309515



Question 9 on Free Response on cmps112-2018q2-midterm.tt with accuracy 0.7142857142857143: 
   Define the function zipwith that takes a function and two lists and
   uses that function to join the lists into a single result list.  If
   the lists are of different length, use failwith to raise an excep-
   tion.  Do not use the length function.  [2pt]
   # zipwith;;
   - : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list = <fun>
   # zipwith (+) [1;2;3] [4;5;6];;
   - : int list = [5; 7; 9]
   # zipwith (/.) [1.;2.;3.] [4.;5.;6.];;
   - : float list = [0.25; 0.4; 0.5]
   # zipwith (+) [1;3;5] [4];;
   Exception: Failure "zipwith".



Question 10 on Free Response on cmps112-2018q2-midterm.tt with accuracy 0.524390243902439: 
    Without using any higher-order functions, code the function find,
   which will return a value associated with a given key.  Use the
   sample interactions to figure out the structure and arguments to
   this function.

   (a) Ocaml.  [2pt]
      # find;;
      - : ('a -> 'b -> bool) -> 'a -> ('b * 'c) list -> 'c option =
      <fun>
      # find (=) 3 [(1,2);(3,4);(5,6)];;
      - : int option = Some 4
      # find (=) 3 [(5,6);(7,8)];;
      - : int option = None

   (b) Scheme.  Use cond.  Do not use if.  Return #f if not found.
      [2pt]
      > (find = 3 '((1 2) (3 4) (5 6)))
      4
      > (find = 3 '((5 6) (7 8)))
      #f



Question 11 on Free Response on cmps112-2018q2-midterm.tt with accuracy 0.7608695652173914: 
    Define the function sum which returns the sum of a list of inte-
   gers.  Use a higher-order function.
    (a) Scheme.  [1pt]
        > foldl
        #<procedure:foldl>
        (define (sum list) ___________________________________ )
        > (sum '(1 2 3))
        6
    (b) Ocaml.  [1pt]
        # let sum = List.fold_left ___________________________________
        ;;
        # List.fold_left;;
        - : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
        val sum : int list -> int = <fun>
        # sum [1;2;3];;
        - : int = 6



Question 12 on Free Response on cmps112-2018q2-midterm.tt with accuracy 0.5862068965517241: 
    Define the function length.
    (a) Scheme.  Use foldl.  [1pt]
        > (define (length list) (___________________________________
        ))
        > (length '(1 3 5 7))
        4
    (b) Ocaml.  Use List.fold_left.  [1pt]
        # let length = List.fold_left
        ___________________________________ ;;
        val length : '_a list -> int = <fun>
        # length [1;2;3;4];;
        - : int = 4




Question 1 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.6226415094339622: 
    With respect to Java, the term ``overloading'' refers to:
    (A) Automatic type conversion when the argument does not match the
        declared type of the parameter.
    (B) Generic classes with type parameterization.
    (C) Multiple functions with the same name and different
        signatures, defined in the same class.
    (D) Multiple functions with the same name and signature, defined
        in a base class and also in its derived classes.



Question 4 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.9444444444444444: 
    What is the type of List.map((+)3)?
    (A) (int -> int) -> int list -> int list
    (B) int list -> (int -> int) list
    (C) int list -> int list
    (D) int list



Question 5 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.5238095238095238: 
    The PL/1 language allows a non-local goto directly from a function
    to a label in a function deeper down in the function call stack,
    thus returning past several levels of function calls.  In Java and
    C++, something similar can be accomplished by what statement?
    (A) break
    (B) continue
    (C) return
    (D) throw



Question 6 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.5454545454545454: 
    What is the type of (>)?
    (A) 'a * 'a -> bool
    (B) 'a -> 'a -> bool
    (C) bool -> 'a -> 'a
    (D) int -> int -> bool



Question 9 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.8260869565217391: 
    In the \lambda-calculus expression $ ( lambda x . ~ + ~ x ~ y ) $:
    (A) $x$ is bound and $y$ is bound.
    (B) $x$ is bound and $y$ is free.
    (C) $x$ is free and $y$ is bound.
    (D) $x$ is free and $y$ is free.



Question 10 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.8823529411764706: 
    What is tye type of (-)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 11 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.9166666666666666: 
    What is the type of List.map?
    (A) ('a -> 'b) -> 'a list -> 'b list
    (B) ('a * 'b) * 'a list * 'b list
    (C) 'a list -> 'b list -> ('a -> 'b)
    (D) ('a list -> 'b list) -> 'a -> 'b



Question 12 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.6363636363636364: 
    What is the type of reverse from the first page?
    (A) 'a list -> 'a list
    (B) 'a list -> 'b list
    (C) int list -> int list
    (D) string list -> string list

                        +--------------------+
                        |                    |
                        |                    |
                        |                    |
                        |                    |
                        |                    |
                        |jpgs/antikythera-0140x125.ps
                        |                    |
                        |                    |
                        |                    |
                        |                    |
                        |                    |
                        +--------------------+

The Antikythera mechanism, built circa 150-100 BCE, is the oldest
known complex scientific calculator, and is sometimes called the first
known analog computer, with operational instructions written in Greek.
http://en.wikipedia.org/wiki/Antikythera_mechanism




Question 2 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.7666666666666667: 
   Define sum using fold left, not recursion.

   (a) Ocaml.  See the next page for the type of fold left.  [1pt]

   (b) Scheme.  The arguments to foldl are in the same order.  [1pt]



Question 5 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.6585365853658537: 
   Smalltalk.  Define a block sum2 which takes a single value: array
   argument and returns its sum.  Use the to:do:  message to iterate
   over the array and use at: to select individual array elements.
   [2pt]
   st> sum2.
   a BlockClosure
   st> sum2 value: #(10 20 30 40 50).
   150
   st> sum2 value: #().
   0



Question 6 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.5925925925925926: 
   Java.  For the example of polymorphism in each of the boxes, de-
   scribe it using one of the following words:  conversion, inclusion,
   overloading, parametric.  Also, in each box write the more general
   classification using one of the words:  ad hoc, universal.  Score:
   1 point if both words in all four boxes are correct, 1/2 point if
   both words in three of the boxes are correct, else 0.  [1pt]

   +-------------------------------+--------------------------------+
   |class bar extends foo {        | class stack<Item> {            |
   |   ...                         |    ...                         |
   |}                              | }                              |
   +-------------------------------+--------------------------------+
   |void f (int i) {               | int value = 6;                 |
   |}                              |                                |
   |void f (String s) {            | double sq = Math.sqrt (value); |
   |}                              |                                |
   +-------------------------------+--------------------------------+



Question 7 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.512396694214876: 
   Without using a higher-order function, and being sure to use tail
   recursion where required, define the function max which takes an
   inequality operator and a list and returns its maximum value.  In
   each case return a special value (see below) for an empty list and
   use an inner worker function otherwise.  See examples.

   (a) Scheme.  Return #f for an empty list.  [3pt]
      > (max > '(3 1 4 1 5 9 2 6 5 3 5))
      9
      > (max < '(3 1 4 1 5 9 2 6 5 3 5))
      1
      > (max string>? '("foo" "bar" "baz"))
      "foo"
      > (max < '())
      #f

   (b) Ocaml.  Return None for an empty list and a Some otherwise.
      [2pt]
      # max;;
      - : ('a -> 'a -> bool) -> 'a list -> 'a option = <fun>
      # max (>) [3;1;4;1;5;9;2;6];;
      - : int option = Some 9
      # max (<) [3;1;4;1;5;9;2;6];;
      - : int option = Some 1
      # max (>) [];;
      - : 'a option = None



Question 8 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.525: 
   Ocaml.  Define maxfl, as above, using the function List.fold_left.
   Do not use recursion.  [2pt]
   # List.fold_left;;
   - : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
   # maxfl;;
   - : ('a -> 'a -> bool) -> 'a list -> 'a option = <fun>
   # maxfl (<) [2;7;8;1;8;2;8];;
   - : int option = Some 1
   # maxfl (>) ["foo";"bar";"baz"];;
   - : string option = Some "foo"
   # maxfl (<) [];;
   - : 'a option = None



Question 10 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.6896551724137931: 
    Ocaml.  Fill in the column at the right with the response given by
   the interactive toploop when the entry at the left is given.  [2pt]

   +----------------------------------+----------------------------------------+
   |List.map;;                        |                                        |
   |                                  |                                        |
   +----------------------------------+----------------------------------------+
   |(+) 1;;                           |                                        |
   |                                  |                                        |
   +----------------------------------+----------------------------------------+
   |1::2::3::[];;                     |                                        |
   |                                  |                                        |
   +----------------------------------+----------------------------------------+
   |let car = function x::_ -> x      |                                        |
   |          | _ -> failwith "car";; |                                        |
   +----------------------------------+----------------------------------------+



Question 11 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.5042016806722689: 
    Define the function zipwith, which takes a function and two lists
   and uses the function to merge the two lists into one.  Ensure the
   lists are the same length without using a length function.  See the
   examples for expected results.

   (a) Scheme.  Return the first parameter if the lists are of differ-
      ent lengths, otherwise return the expected result.  [3pt]
      > (zipwith #f + '(1 2 3 4) '(5 6 7 8))
      (6 8 10 12)
      > (zipwith #f - '(1 2 3) '(4))
      #f
      > (zipwith #f * '() '())
      ()
      > (zipwith #f / '(1 2 3) '(4 5 6))
      (1/4 2/5 1/2)

   (b) Ocaml.  Use failwith "zipwith" if the lists are if different
      lengths.  [3pt]
      # zipwith;;
      - : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list = <fun>
      # zipwith (+) [1;2;3;4] [5;6;7;8];;
      - : int list = [6; 8; 10; 12]
      # zipwith (-) [1;2;3] [4];;
      Exception: Failure "zipwith".
      # zipwith ( * ) [] [];;
      - : int list = []
      # zipwith (/.) [1.;2.;3.] [4.;5.;6.];;
      - : float list = [0.25; 0.4; 0.5]



Question 12 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.7678571428571429: 
    C.  Write a function to reverse a list.  Do not use malloc or
   free.  Do not assign to any value field.  Make assignment only to
   the link fields of the nodes.  The function is destructive of the
   original list.  Return a pointer to the reversed list.  [2pt]
                         |
   struct node {         | struct node* reverse (struct node* head) {
      int value;         |
      struct node* link; |
   };                    |




Question 1 on Multiple Choice part 1 on cmps112-2018q4-midterm.tt with accuracy 0.625: 
    Unix.  What is the symbolic name for a user's home directory?
    (A) $
    (B) .
    (C) /
    (D) ~



Question 3 on Multiple Choice part 1 on cmps112-2018q4-midterm.tt with accuracy 0.6363636363636364: 
    Scheme.  What will indicate to the parent process that an error
    has occurred?
    (A) (exit 0)
    (B) (exit 1)
    (C) exit(0);
    (D) exit(1);



Question 5 on Multiple Choice part 1 on cmps112-2018q4-midterm.tt with accuracy 0.95: 
    Unix.  Which environment variable must be adjusted in order to
    find the location of programs that are not in the standard
    directories?
    (A) $HOME
    (B) $PATH
    (C) $TERM
    (D) $USER



Question 6 on Multiple Choice part 1 on cmps112-2018q4-midterm.tt with accuracy 0.6896551724137931: 
    Which of the following will not be written using tail recursion?
    (A) Computing a Fibonacci number.
    (B) Finding the sum of all elements in a list.
    (C) Mapping a unary function onto a list.
    (D) Reversing a list.



Question 11 on Multiple Choice part 1 on cmps112-2018q4-midterm.tt with accuracy 0.9411764705882353: 
    Ocaml.  What is the type of (+)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 12 on Multiple Choice part 1 on cmps112-2018q4-midterm.tt with accuracy 0.6428571428571429: 
    Ocaml.  Type checking is:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static

                +------------------------------------+
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                |jpgs/functional-programming-joke.ps |
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                +------------------------------------+




Question 1 on Free Response on cmps112-2019q1-midterm.tt with accuracy 0.5476190476190477: 
   What is the output from each of the following when entered at the
   interactive prompt?  [4pt]

   +-------+---------------------------------------+--------------------------------+
   |Ocaml  | # (+);;                               |                                |
   +-------+---------------------------------------+--------------------------------+
   |Ocaml  | # List.map;;                          |                                |
   +-------+---------------------------------------+--------------------------------+
   |Ocaml  | # (<);;                               |                                |
   +-------+---------------------------------------+--------------------------------+
   |Ocaml  | # (+.) 3.;;                           |                                |
   +-------+---------------------------------------+--------------------------------+
   |Scheme | > (apply * '(1 2 3))                  |                                |
   +-------+---------------------------------------+--------------------------------+
   |Scheme | > (map (lambda (x) (* 3 x)) '(1 2 3)) |                                |
   +-------+---------------------------------------+--------------------------------+
   |Scheme | > ((lambda (x y) (cons x y)) 3 '(4))  |                                |
   +-------+---------------------------------------+--------------------------------+
   |Scheme | > (let ((x 3) (y 4)) (* x y))         |                                |
   +-------+---------------------------------------+--------------------------------+



Question 2 on Free Response on cmps112-2019q1-midterm.tt with accuracy 0.527027027027027: 
   Code the function maximum which takes two arguments:  a comparison
   function, and a list.  It returns the maximum element in the list
   if the list is non-empty.

    (a) Ocaml.  Return None if the list is empty.  [3pt]
        # maximum;;
        - : ('a -> 'a -> bool) -> 'a list -> 'a option = <fun>
        # maximum (>) [3;1;4;1;5];;
        - : int option = Some 5
        # maximum (<) [3.;1.;4.;1.;5.];;
        - : float option = Some 1.
        # maximum (=) [];;
        - : 'a option = None

    (b) Scheme.  Return #f if the list is empty.  [3pt]
        > maximum
        #<procedure:maximum>
        > (maximum > '(1 2 3 4 5))
        5
        > (maximum < '(1.0 2.0 3.0 4.0 5.0))


Question 4 on Free Response on cmps112-2019q1-midterm.tt with accuracy 0.6206896551724138: 
   Define the function sum without using any higher-order functions.

    (a) Ocaml.  Use the following type:  [2pt]
        val sum : float list -> float

    (b) Scheme.  The result is whatever the + function naturally re-
        turns.  [2pt]



Question 5 on Free Response on cmps112-2019q1-midterm.tt with accuracy 0.7407407407407407: 
   Define the function fold_left, whose arguments are a folding func-
   tion, a unit value, and a list.  The unit value is used as the
   leftmost argument to the folding function.

    (a) Ocaml.  Use the following type:  [2pt]
        val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a

    (b) Scheme.  Arguments are in the same order as the Ocaml ques-
        tion.  [2pt]



Question 6 on Free Response on cmps112-2019q1-midterm.tt with accuracy 0.6862745098039216: 
   Define the function sum making use of fold_left.  The function
   should satisfy the same requirements as the previous sum question,
   and use the fold_left function defined above.

    (a) Ocaml.  Fill in the space.  Do not alter anything to the left
        of the equal (=) symbol.  [1pt]

        # let sum = ________________________________________;;
        val sum : float list -> float = <fun>

    (b) Scheme.  [1pt]



Question 7 on Free Response on cmps112-2019q1-midterm.tt with accuracy 0.5813953488372093: 
   Smalltalk.  Extend class Array with method sum, which returns the
   sum of all element of an array.  Make no attempt to verify that el-
   ements are numbers.  [2pt]
   st> a := #(1 2 3 4 5).
   (1 2 3 4 5 )
   st> a sum.
   15
   st> a := #().
   ()
   st> a sum.
   0



Question 9 on Free Response on cmps112-2019q1-midterm.tt with accuracy 0.6612903225806451: 
   Ocaml.  Define eval so that it takes an expression as defined here.
   Functions themselves are in the expression.  There is no hash table
   in this question.  An example interaction is shown.  [2pt]
   # type binfn = float -> float -> float;;
   # type expr = Expr of binfn * expr * expr
               | Num of float;;
   # eval;;
   - : expr -> float = <fun>
   # eval (Expr ((+.),
           Expr ((/.), Num 3., Num 4.),
           Expr ((/.), Num 7., Num 8.)));;
   - : float = 1.625



Question 10 on Free Response on cmps112-2019q1-midterm.tt with accuracy 0.6559139784946236: 
    Scheme.  Define evalexpr which takes an expression as an argument.
   An expression is a number or a list consisting of a symbol repre-
   senting an operator, followed by zero or more expressions.  Assume
   fnhash is a hash table which maps symbols onto functions that may
   be used to evaluate operators.  Apply the function to the result of
   mapping eval onto the list of arguments.  Expressions are nested
   arbitrarily deeply.  Assume all expresions are valid (no need for
   error checking).  The result must always be a real or complex num-
   ber.  [3pt]
   > (evalexpr '(+ (* 2 3) (* 4 5)))


Question 1 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.75: 
    What kind of type checking is used in Ocaml?
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static



Question 2 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.75: 
    What kind of type checking is used in Scheme?
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static



Question 4 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.9411764705882353: 
    Ocaml.  What is the type of (+)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 5 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.7931034482758621: 
    What takes a function and a list, applies that function to every
    element of the list, and returns a resulting list of the same
    length as the argument list?
    (A) apply
    (B) fold_left
    (C) filter
    (D) map



Question 6 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.9166666666666666: 
    Assuming x is a proper list, what will return a list equivalent to
    x?
    (A) (car (cdr x) (cons x))
    (B) (car (cons x) (cdr x))
    (C) (cdr (car x) (cons x))
    (D) (cdr (cons x) (car x))
    (E) (cons (car x) (cdr x))
    (F) (cons (cdr x) (car x))



Question 8 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.6538461538461539: 
    How much stack space (not time) is taken by the following
    function?
    (define (f n)
       (cond ((< n 0) #f)
             ((= n 0) 0)
             ((= n 1) 1)
             (else (+ (f (- n 1))
                      (f (- n 2))))))
    (A) $ O ( 1 ) $
    (B) $ O ( n ) $
    (C) $ O ( n sup 2 ) $
    (D) $ O ( 2 sup n ) $



Question 12 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.6666666666666666: 
    Smalltalk.  What is the order of evaluation of:
    a*b+c*d
    (A) ((a*b)+c)*d
    (B) (a*(b+c))*d
    (C) (a*b)+(c*d)
    (D) a*((b+c)*d)
    (E) a*(b+(c*d))

                    +---------------------------+
                    |                           |
                    |                           |
                    |                           |
                    |                           |
                    |                           |
                    |jpgs/duck-typing-2.ps      |
                    |                           |
                    |                           |
                    |                           |
                    |                           |
                    |                           |
                    +---------------------------+




