Matching questions with at least 0.7 in common.

Question 8 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.75: 
   Ocaml.  Write a function to reverse a list.  [2pt]



Question 9 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.7333333333333333: 
   Java.  Write a function to reverse a list.  Do not allocate or free
   any nodes.  Do not use auxiliary functions.  [2pt]
                |
   class node { | node reverse (node head) {
     int value; |
     node link; |
   }            |
                |
                |
                |
                |
                |
                | }



Question 10 on Multiple Choice part 1 on cmps112-2017q4-midterm.tt with accuracy 0.9285714285714286: 
    Type of (+)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 12 on Multiple Choice part 1 on cmps112-2017q4-midterm.tt with accuracy 0.8636363636363636: 
    In the expression $ ( \lambda x . ( + x ) y ) $
    (A) $x$ is bound and $y$ is bound.
    (B) $x$ is bound and $y$ is free.
    (C) $x$ is free and $y$ is bound.
    (D) $x$ is free and $y$ is free.

+---------------------------------+
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|jpgs/math-but-yesterday-you-said.ps
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
+---------------------------------+




Question 2 on Free Response on cmps112-2018q1-midterm.tt with accuracy 0.7692307692307693: 
   Ocaml.  What is the output from each of the following?  [2pt]

   +-----------------------------+----------------------------------------+
   |reverse;;                    |                                        |
   +-----------------------------+----------------------------------------+
   |(*);;                        |                                        |
   +-----------------------------+----------------------------------------+
   |1::2::3::[];;                |                                        |
   +-----------------------------+----------------------------------------+
   |let car = function x::_ -> x |                                        |
   |     | _ -> failwith "car";; |                                        |
   +-----------------------------+----------------------------------------+



Question 4 on Multiple Choice part 1 on cmps112-2018q1-midterm.tt with accuracy 0.7142857142857143: 
   Smalltalk's type system is:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static



Question 3 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.9230769230769231: 
    Output of:
    # (-);;
    (A) - : int * int * int = <fun>
    (B) - : int * int -> int = <fun>
    (C) - : int -> int * int = <fun>
    (D) - : int -> int -> int = <fun>



Question 11 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.7777777777777778: 
    What produces x itself as a result of this expression, assuming x
    is a list of at least one element?
    (A) (cons (car x) (cdr x))
    (B) (cons (cdr x) (car x))
    (C) (list (car x) (cdr x))
    (D) (list (cdr x) (car x))



Question 12 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.7142857142857143: 
    Ocaml's type system is:
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static




Question 9 on Free Response on cmps112-2018q2-midterm.tt with accuracy 0.7142857142857143: 
   Define the function zipwith that takes a function and two lists and
   uses that function to join the lists into a single result list.  If
   the lists are of different length, use failwith to raise an excep-
   tion.  Do not use the length function.  [2pt]
   # zipwith;;
   - : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list = <fun>
   # zipwith (+) [1;2;3] [4;5;6];;
   - : int list = [5; 7; 9]
   # zipwith (/.) [1.;2.;3.] [4.;5.;6.];;
   - : float list = [0.25; 0.4; 0.5]
   # zipwith (+) [1;3;5] [4];;
   Exception: Failure "zipwith".



Question 11 on Free Response on cmps112-2018q2-midterm.tt with accuracy 0.7608695652173914: 
    Define the function sum which returns the sum of a list of inte-
   gers.  Use a higher-order function.
    (a) Scheme.  [1pt]
        > foldl
        #<procedure:foldl>
        (define (sum list) ___________________________________ )
        > (sum '(1 2 3))
        6
    (b) Ocaml.  [1pt]
        # let sum = List.fold_left ___________________________________
        ;;
        # List.fold_left;;
        - : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>
        val sum : int list -> int = <fun>
        # sum [1;2;3];;
        - : int = 6



Question 4 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.9444444444444444: 
    What is the type of List.map((+)3)?
    (A) (int -> int) -> int list -> int list
    (B) int list -> (int -> int) list
    (C) int list -> int list
    (D) int list



Question 9 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.8260869565217391: 
    In the \lambda-calculus expression $ ( lambda x . ~ + ~ x ~ y ) $:
    (A) $x$ is bound and $y$ is bound.
    (B) $x$ is bound and $y$ is free.
    (C) $x$ is free and $y$ is bound.
    (D) $x$ is free and $y$ is free.



Question 10 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.8823529411764706: 
    What is tye type of (-)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 11 on Multiple Choice part 1 on cmps112-2018q2-midterm.tt with accuracy 0.9166666666666666: 
    What is the type of List.map?
    (A) ('a -> 'b) -> 'a list -> 'b list
    (B) ('a * 'b) * 'a list * 'b list
    (C) 'a list -> 'b list -> ('a -> 'b)
    (D) ('a list -> 'b list) -> 'a -> 'b



Question 2 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.7666666666666667: 
   Define sum using fold left, not recursion.

   (a) Ocaml.  See the next page for the type of fold left.  [1pt]

   (b) Scheme.  The arguments to foldl are in the same order.  [1pt]



Question 12 on Free Response on cmps112-2018q4-midterm.tt with accuracy 0.7678571428571429: 
    C.  Write a function to reverse a list.  Do not use malloc or
   free.  Do not assign to any value field.  Make assignment only to
   the link fields of the nodes.  The function is destructive of the
   original list.  Return a pointer to the reversed list.  [2pt]
                         |
   struct node {         | struct node* reverse (struct node* head) {
      int value;         |
      struct node* link; |
   };                    |




Question 5 on Multiple Choice part 1 on cmps112-2018q4-midterm.tt with accuracy 0.95: 
    Unix.  Which environment variable must be adjusted in order to
    find the location of programs that are not in the standard
    directories?
    (A) $HOME
    (B) $PATH
    (C) $TERM
    (D) $USER



Question 11 on Multiple Choice part 1 on cmps112-2018q4-midterm.tt with accuracy 0.9411764705882353: 
    Ocaml.  What is the type of (+)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 5 on Free Response on cmps112-2019q1-midterm.tt with accuracy 0.7407407407407407: 
   Define the function fold_left, whose arguments are a folding func-
   tion, a unit value, and a list.  The unit value is used as the
   leftmost argument to the folding function.

    (a) Ocaml.  Use the following type:  [2pt]
        val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a

    (b) Scheme.  Arguments are in the same order as the Ocaml ques-
        tion.  [2pt]



Question 1 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.75: 
    What kind of type checking is used in Ocaml?
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static



Question 2 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.75: 
    What kind of type checking is used in Scheme?
    (A) strong and dynamic
    (B) strong and static
    (C) weak and dynamic
    (D) weak and static



Question 4 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.9411764705882353: 
    Ocaml.  What is the type of (+)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 5 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.7931034482758621: 
    What takes a function and a list, applies that function to every
    element of the list, and returns a resulting list of the same
    length as the argument list?
    (A) apply
    (B) fold_left
    (C) filter
    (D) map



Question 6 on Multiple Choice part 1 on cmps112-2019q1-midterm.tt with accuracy 0.9166666666666666: 
    Assuming x is a proper list, what will return a list equivalent to
    x?
    (A) (car (cdr x) (cons x))
    (B) (car (cons x) (cdr x))
    (C) (cdr (car x) (cons x))
    (D) (cdr (cons x) (car x))
    (E) (cons (car x) (cdr x))
    (F) (cons (cdr x) (car x))



